ListNode* cycle(ListNode* head){
    if(head==NULL || head->next==NULL){
        return NULL;
    }
    
    ListNode* slow=head;
    ListNode* fast=head;
    while(fast && fast->next){
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast)return fast;
    }
    return NULL;
}

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* intersection=cycle(head);
        if(intersection==NULL)return NULL;

        ListNode* temp=head;
        while(temp!=intersection){
            temp=temp->next;
            intersection=intersection->next;
        }
        return temp;
    }
};