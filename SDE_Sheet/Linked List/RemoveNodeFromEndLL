//brute   O(2N) O(1)

int count(ListNode* head){
    ListNode* temp=head;
    int cnt=0;
    while(temp!=NULL){
        cnt++;
        temp=temp->next;
    }
    return cnt;
}

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int k=count(head)-n;
        
        //edge case
        if(k==0){
            head=head->next;
            return head;
        }

        ListNode* temp=head;

        while(--k){
            temp=temp->next;
        }

        ListNode* Node=temp->next;
        temp->next=temp->next->next;
        delete(Node);
        
        return head;
    }
};

//optimal       O(N)   O(1)

 ListNode* removeNthFromEnd(ListNode* head, int n) {

        if(head == NULL || k == 0){
        return head;
        }

        ListNode* dummy=new ListNode();
        dummy->next=head;
        ListNode* fast=dummy;
        ListNode* slow=dummy;

        for(int i=0;i<n;i++){
            fast=fast->next;
        }
        
        while(fast->next!=NULL){
            fast=fast->next;
            slow=slow->next;
        }

        slow->next=slow->next->next;
        return dummy->next;
}