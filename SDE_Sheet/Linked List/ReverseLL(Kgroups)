// If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
//      O(N)   O(1)

int count(ListNode* head){
    ListNode* temp=head;
    int cnt=0;
    while(temp){
        cnt++;
        temp=temp->next;
    }
    return cnt;
}

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL || head->next==NULL)return head;

        int length=count(head);

        ListNode* temp=new ListNode(0);
        temp->next=head;

        ListNode* pre=temp;
        ListNode* cur;
        ListNode* nex;

        while(length>=k){

            cur=pre->next;
            nex=cur->next;

            for(int i=1;i<k;i++){
                cur->next=nex->next;
                nex->next=pre->next;
                pre->next=nex;
                nex=cur->next;
            }   
            pre=cur;
            length-=k;
        }
        return temp->next;
    }
};

//if to reverse left-out nodes in the end
//      O(N)   O(1)
Node* kReverse(Node* head, int k) {
    if(head==NULL){
        return NULL;
    }

    Node* prev=NULL;
    Node* curr=head;
    Node* next=NULL;
    int count=0;

    while(curr!=NULL && count<k){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
        count++;
    }

    if(next!=NULL){
        head->next=kReverse(next,k);
    }

    return prev;
}
