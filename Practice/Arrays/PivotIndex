//O(N*N) O(1)  TLE
int equilibriumPoint(long long a[], int n) {
        
        if(n==1)return 1;
        
        for(int i=0; i<n; i++){

            int lSum=0, rSum=0;

            for(int j=0; j<i; j++){
                lSum+=a[j];
            }
        
            for(int j=i+1; j<n; j++){
                rSum+=a[j];
            }
            
            if(lSum==rSum)return i;
        }
        return -1;
    }

//O(N) O(1)
int equilibriumPoint(long long a[], int n) {
    
        if(n==1)return 1;    
        long long lsum=0, rsum=0;
        
        for(int i=2; i<n; i++){
            rsum+=a[i];
        }
        
        for(int i=0, j=2; j<n; i++, j++){
            
            lsum+=a[i];
            if(lsum==rsum)return i+2;
            rsum-=a[j];
        }
        return -1;
    }
//we are considering initially first index element can be the partitioning element.
//Now, we traverse the array from left to right, subtracting an element from right_sum and
// adding an element to left_sum. At the point where right_sum equals left_sum, we get the partition.