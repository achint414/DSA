//sort the strings and compare(first check if strings of diff len)
//O(n logn) O(1)

bool isAnagram(string a, string b){
        
        // Your code here
        if(a.size()!=b.size()){
            return false;
        }
    
        sort(a.begin(), a.end());         
        sort(b.begin(), b.end());   
    
        for(int i=0; i<a.size(); i++){
            
            if(a[i]!=b[i])
                return false;
                
        }
        
    return true;
}

//O(N) O(1)
//count frequency of every element in Str1, iterate through Str2 and decrease the count of every element in the frequency array.
//Now iterate again, if the frequency at any point is not 0 this means, strings are not anagrams of each other.

 bool isAnagram(string a, string b){
        
        
         if(a.size()!=b.size()){
            return false;
        }
        
        int freq[26]={0};
        
        for(int i=0; i<a.length(); i++){
            freq[a[i] - 'A']++;
        }
        
        for(int i=0; i<b.length(); i++){
            freq[b[i] - 'A']--;
        }
        
        for(int i=0; i<26; i++){
            if(freq[i]!=0){
                return false;
            }
        }
        
    return true;
    
    }

    //all lowercase to uppercase/lower
    // transform(a.begin(), a.end(), a.begin(), ::toupper);        //::tolower
    //transform(b.begin(), b.end(), b.begin(), ::toupper);
    //takes O(N) O(1)