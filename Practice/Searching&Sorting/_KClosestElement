//brute - sort with respect to difference and store - return first k elements

//2ptr method
vector<int> findClosestElements(vector<int>& arr, int k, int x) {
    
    vector<int>ans;
    int l=0, h=arr.size()-1;
    while(h-l >= k){

        if(x-arr[l] > arr[h]-x){
            l++;
        }
        else h--;
    }
    for(int i=l; i<=h; i++){
        ans.push_back(arr[i]);
    }
    return ans;
}

//BS + 2ptr
//find closest element to x (>=x), lower bound
//h -> closest element index, l -> (h-1)
//[l, h] window formed, expand window to k, size->k

int lowerBound(vector<int>&arr, int x){
        int s=0, e=arr.size()-1;
        int ans=e;

        while(s<=e){
            
            int mid=s+(e-s)/2;

            if(arr[mid] >= x){
                ans=mid;
                e=mid-1;
            }
            else s=mid+1;
        }
        return ans;
    }

    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        
        int h=lowerBound(arr, x);
        int l=h-1;  

        while(k--){
            
            if(l < 0)h++;
            else if(h >= arr.size())l--;
    
            else if(x-arr[l] > arr[h]-x){
                h++;
            }
            else l--;    
        }

        return vector<int>(arr.begin() + l + 1, arr.begin() + h);
    }

