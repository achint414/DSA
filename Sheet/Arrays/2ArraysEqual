// O(n log n) O(1)
bool areEqual(int arr1[], int arr2[], int N, int M)
{
    // If lengths of array are not equal means
    // array are not equal
    if (N != M)
        return false;
 
    // Sort both arrays
    sort(arr1, arr1 + N);
    sort(arr2, arr2 + M);
 
    // Linearly compare elements
    for (int i = 0; i < N; i++)
        if (arr1[i] != arr2[i])
            return false;
 
    // If all elements were same.
    return true;
}

//O(n) O(n)

bool check(vector<ll> A, vector<ll> B, int N) {
        //code here
        unordered_map<int, int>mp;
        
        if(A.size() != B.size()) return false;
        
        for(int i=0; i<N; i++){
            mp[A[i]]++;
        }
        
        for(int i=0; i<N; i++){
            
            // If there is an element in arr2[], but
            // not in arr1[]
            if(mp.find(B[i]) == mp.end()) return false;
            
            // If an element of arr2[] appears more
            // times than it appears in arr1[]
            if(mp[B[i]] == 0) return false;
            
            mp[B[i]]--;
        }
    return true;
    }
