// Better /Optimal(to return index)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int ,int>mpp;
        for(int i=0;i<nums.size();i++){
            int a=nums[i];
            int moreReq=target-a;
            if( mpp.find(moreReq) != mpp.end() ){
                return{ mpp[moreReq] , i };                       //return the index
            }
            mpp[a]=i;
        }
        return{-1,-1};
    }
};


//Optimal

  string read(int n, vector<int> book, int target) {
    
  sort(book.begin(), book.end());
  int left=0; int right=n-1;                           //2pointer approach(greedy)
  while(left<right){
        int sum = book[left] + book[right];
        if (sum == target) {
          return "YES";
        }
        else if(sum<target)left++;
        else right--;
  }
  return "NO";
}





