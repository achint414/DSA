//Brute (traversal)                    O(2N)   O(1)

int CountNode(Node* head){
    
    int cnt=0;
    while(head!=NULL){
        head=head->next;
        cnt++;
    }
    return cnt;
}

Node *findMiddle(Node* head) {
    
    int n=CountNode(head);
    int ans=(n/2)+1;
    while(ans>1){
        head=head->next;
    }
    return head;
}



// 2 pointer (slow fast) Tortoise-Hare-Approach       O(N) O(1)         

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }

        ListNode* slow=head;
        ListNode* fast=head->next;
        while(fast!=NULL){
            fast=fast->next;
            if(fast!=NULL){
                fast=fast->next;
            }
            slow=slow->next;
        }
        return slow;
    }
};